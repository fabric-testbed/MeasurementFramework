---



- name: Sanity Check
  debug: 
    msg: "!!!!!!!!!!!!!Setting up Public metrics {{ install_name }} at {{ ansible_host }}.!!!!!!!!!!!!!"

# - name: Python version
#   debug:
#     msg: "{{ ansible_python_interpreter }}"
    
# - name: check python 
#   shell: which python3 

# - name: check python 
#   shell: which python3
#   become: yes


- name: Install docker Python SDK
  ansible.builtin.pip:
    name: docker 
    executable: pip3
    state: present
  become: yes

# needed on remote for htpasswd
- name: passlib
  ansible.builtin.pip: 
    name: passlib
    executable: pip3
    state: present
  become: yes


####################
#  DOCKER NETWORK  #
####################
# note that taking down the network may affect other containers added by other scripts 
- name: Setup the docker network to be used by the monitoring containers.
  include_tasks: setup_tasks/setup_docker_ipv6_network_tasks.yml



- name: Stop Docker Compose 
  block:
  - name: Check if docker-compose.yml exists 
    stat: 
      path: "{{ base_install_dir }}/docker-compose.yml"
    register: docker_compose_file_status

  - name: Stop Docker compose file
    shell: docker-compose down 
    args:
      chdir: "{{ base_install_dir }}"
    when: docker_compose_file_status.stat.exists
  ignore_errors: true



##############################
#  Setup OPT/DATA Directory  #
##############################
- name: Setup OPT/DATA Directory
  block:
  - name: Create and mount data dir
    import_tasks: create_mount_data_dir_tasks.yml
  when: 
    - mount_data_drive is defined 
    - mount_data_drive #== yes



####################     
#      USER        #
####################
- name: Setup user for promtheus monitoring system
  # Create a user to setup all the fab monitoring stuff under.
  include_tasks: setup_tasks/create_prom_user_tasks.yml




################
#  USER SETUP  #
################

#### no longer needed since minio is separate

# # CREATE USER minio_user #
# - name: "Setup Minio User"
#   block:
#     - name: "Create Minio user as minio_user"
#       user:
#         name: "{{ minio_username }}"
#         shell: /usr/sbin/nologin
#         system: true
#         create_home: false
#         home: /
#   become: yes

# # GET USER minio  uid:gid #
# - name: "Get Minio User"
#   block:
#     - name: "Get Fabric Prometheus user ids"
#       getent:
#         database: passwd
#         key: fab-minio
#     - debug:
#        var: ansible_facts.getent_passwd

#     - set_fact:
#         minio_user_uid: "{{ getent_passwd['fab-minio'][1] }}"
#         minio_user_gid: "{{ getent_passwd['fab-minio'][2] }}"
#     # the need to assign it to a var so we can use in later
#   become: yes


#################
#   BASE DIRs   #
#################
##### since minio is separate this should be changed to standard fab-prom ser
- name: Create Base Directories 
  block:

  - name: Create Base Directory
    file: 
      path: "{{ base_install_dir }}"
      recurse: yes
      state: directory 
      mode: 0755
      owner: "{{ prom_user_name }}"
      group: "{{ prom_group_name }}"
    become: yes

  - name: Create Data Directory
    file: 
      path: "{{ base_data_dir }}"
      recurse: yes
      state: directory 
      mode: 0755
      owner: "{{ prom_user_name }}"
      group: "{{ prom_group_name }}"
    become: yes


####################
#   PROMETHEUS     #
####################
# Prometheus consists of several tasks that must be done.
- name: Prometheus Setup
  block:
  - name: Setup Prometheus Directories
    include_tasks: Prometheus/setup_prometheus_directories_tasks.yml
  
  - name: Setup Promtheus Config Files via templates
    include_tasks: Prometheus/add_prometheus_config_templates.yml
    # See vars for templates used
    
  - name: Setup Promtheus Config Files via files
    include_tasks: Prometheus/add_prometheus_config_files.yml
    # See vars for files used

  # - name: Prometheus Alert Rules
  #   include_tasks: Prometheus/add_alert_rules.yml
  #   # See vars for files used

  # - name: Setup Prometheus Secrets
  #   include_tasks: Prometheus/add_prometheus_secrets.yml




####################
#     MIMIR        #
####################

- name: Setup Mimir 
  block:
    - name: create mimir dirs 
      file:
        path: "{{ base_install_dir }}/mimir/{{ item }}"
        state: directory
        recurse: yes
        #owner: "{{ ??_user_name }}"
        #group: "{{ ???_group_name }}"
      with_items:
        - [ "config"  ]

    # - name: "Create Grafana Data directories"
    #   file:
    #     path: "{{ base_data_dir }}/grafana/{{ item }}"
    #     state: directory
    #     recurse: yes
    #     owner: "{{ grafana_user_name }}"
    #     group: "{{ grafana_group_name }}"
    #   with_items:
    #     - [ "data" ]

    - name: copy mimir templates 
      template: 
        src: "mimir_config.yml.j2"
        dest: "{{ base_install_dir }}/mimir/config/mimir.yml"


  become: yes






      


####################
#     Grafana      #
####################
- name: Setup Grafana
  block:

    - name: Grafana user.
      include_tasks: Grafana/grafana_user_tasks.yml

    - name: Grafana Directories
      include_tasks: Grafana/setup_grafana_directories_tasks.yml

    - name: Grafana Config
      include_tasks: Grafana/config_grafana_tasks.yml

    - name: Grafana Datasources
      include_tasks: Grafana/grafana_provisioning_tasks.yml
 
    - name: Grafana Plugins
      include_tasks: Grafana/grafana_add_plugins_tasks.yml






####################
#     NGINX        #
####################
- name: Setup Nginx
  block:
    # Directories
    - name: Nginx Directories
      include_tasks: Nginx/setup_nginx_directories_tasks.yml

    # Config files
    - name: Nginx Configs
      include_tasks: Nginx/config_nginx_tasks.yml

    # # HTML files
    # - name: Nginx HTML files
    #   include_tasks: Nginx/html_nginx_tasks.yml
          
          
    # Add user to htaccess file
    # note htpasswd requires passlib to be installed on remote
    #- name: Nginx htaccess user
    #  include_tasks: Nginx/add_user_to_htaccess_tasks.yml
    - name: Nginx htaccess users   
      include_tasks: Nginx/add_users_to_htaccess_tasks.yml
      
    # Confd server files
    - name: Nginx Add Confd  Files
      include_tasks: Nginx/confd_nginx_tasks.yml






# ##################
# #     NGINX      #
# ##################
# - name: Create NGNIX Directories 
#   block:
#   - name: Create Directories for NGINX configs
#     file: 
#       path: "{{ base_install_dir }}/{{ item }}"
#       recurse: yes
#       state: directory 
#       mode: 0755
#       owner: "{{ minio_user_uid }}"
#       group: "{{ minio_user_gid }}"
#     with_items: ["nginx", "nginx/config"]
#     become: yes

##################
# NGINX CONFIGs  #
##################

# Copy nginx conf files
# - name: Add nginx conf file
#   template:
#     src: "nginx.conf.j2"
#     dest: "{{ base_install_dir }}/nginx/config/nginx.conf"
#     owner: "{{ minio_user_uid }}"
#     group: "{{ minio_user_gid }}"
#   become: yes

# - name: Add nginx ssl snippet file
#   template:
#     src: "nginx_ssl_snippet.conf.j2"
#     dest: "{{ base_install_dir }}/nginx/config/ssl_snippet.conf"
#     owner: "{{ minio_user_uid }}"
#     group: "{{ minio_user_gid }}"
#   become: yes

#######################
#   DOCKER COMPOSER   #
#######################

# copy docker-compose file

- name: Add docker-compose file
  template:
    src: "DockerCompose/docker_compose_complete.yml.j2"
    dest: "{{ base_install_dir }}/docker-compose.yml"
    owner: "{{ prom_user_name }}"
    group: "{{ prom_group_name }}"
    mode: 0644
  become: yes




- name: Start Docker Compose 
  block:
  - name: Start Docker compose file
    shell: docker-compose up -d
    args:
      chdir: "{{ base_install_dir }}"



# start docker-compose

# - name: Start docker compose 
#   community.docker.docker_compose:
#     project_src: "{{ base_install_dir }}/docker-compose.yml"
#     state: present 


# # - name: Start docker compose 
# #   shell:
# #     cmd: "docker compose -f {{ base_install_dir }}/docker_compose.yml up -d"
# #   become: yes